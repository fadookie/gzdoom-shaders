version "2.5"

const DISTORTION_SHADER = "TrippyPerlin";

class EffectPlayer : DoomPlayer
{
	CVar timescale;
	CVar scale;
	CVar distortion;
	CVar subtractive;
	CVar animh;
	CVar anims;
	CVar animv;
	CVar tintr;
	CVar tintg;
	CVar tintb;

	override void Tick()
	{
		Super.Tick();
		
		if (!player || !player.mo || player.mo != self)	
			return;
		
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "scale", scale.GetFloat());
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "distortionMultiplier", distortion.GetFloat());
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "subtractiveDistortionMultiplier", subtractive.GetFloat());
		
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "NewTime", level.time * timescale.GetFloat());
		Shader.SetUniform3f(Player, DISTORTION_SHADER, "tintColor", (tintr.GetFloat(), tintg.GetFloat(), tintb.GetFloat()));
		
		let hue = animh.GetBool() ? level.time : 0;
		let sat = anims.GetBool() ? cos(level.time) * 2 : 0;
		let val = animv.GetBool() ? (sin(level.time) + 1) / 2.5 : 0;
		
		Shader.SetUniform3f(Player, DISTORTION_SHADER, "hsvShift", (hue, sat, val));
	}
	

	override void PostBeginPlay()
	{
		Console.Printf("Player init");
		super.PostBeginPlay();
		
		timescale = CVar.FindCVar("timescale");
		scale = CVar.FindCVar("scale");
		distortion = CVar.FindCVar("distortion");
		subtractive = CVar.FindCVar("subtractive");
		animh = CVar.FindCVar("animh");
		anims = CVar.FindCVar("anims");
		animv = CVar.FindCVar("animv");
		tintr = CVar.FindCVar("tintr");
		tintg = CVar.FindCVar("tintg");
		tintb = CVar.FindCVar("tintb");
		
		//Shader.SetEnabled(Player, DISTORTION_SHADER, true);
		/*
        ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
        Actor mo;
        while ( mo = Actor(MonsterFinder.Next()) )
        {
            if ( mo.bIsMonster )
            {
                //mo.RenderStyle = "Fuzzy";
				Console.Printf("Got monster" .. mo);
            }
		}
		*/
	}
}


/*

class WaterHandler : StaticEventHandler 
{
    override void RenderOverlay(RenderEvent e) 
	{
        // set the player's timer up correctly (more-than-1-tick precision)
        PlayerInfo p = players[consoleplayer];
        Shader.SetUniform1f(p, "watershader", "timer", gametic + e.FracTic);
        
        if (p.mo.waterlevel >= 3) 
		{
            Shader.SetEnabled(p, "watershader", true);
            Shader.SetEnabled(p, "waterzoomshader", true);
            double effectSize = CVar.GetCVar("uw_effectsize", p).GetFloat();
            Shader.SetUniform1f(p, "watershader", "waterFactor", effectSize);
            Shader.SetUniform1f(p, "waterzoomshader", "zoomFactor", 1 - (effectSize * 2));
        }
        else 
		{
            Shader.SetEnabled(p, "watershader", false);
            Shader.SetEnabled(p, "waterzoomshader", false);
        }
    }
}
*/
