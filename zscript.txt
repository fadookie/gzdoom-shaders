version "2.5"

/*

class WaterHandler : StaticEventHandler 
{
    override void RenderOverlay(RenderEvent e) 
	{
        // set the player's timer up correctly (more-than-1-tick precision)
        PlayerInfo p = players[consoleplayer];
        Shader.SetUniform1f(p, "watershader", "timer", gametic + e.FracTic);
        
        if (p.mo.waterlevel >= 3) 
		{
            Shader.SetEnabled(p, "watershader", true);
            Shader.SetEnabled(p, "waterzoomshader", true);
            double effectSize = CVar.GetCVar("uw_effectsize", p).GetFloat();
            Shader.SetUniform1f(p, "watershader", "waterFactor", effectSize);
            Shader.SetUniform1f(p, "waterzoomshader", "zoomFactor", 1 - (effectSize * 2));
        }
        else 
		{
            Shader.SetEnabled(p, "watershader", false);
            Shader.SetEnabled(p, "waterzoomshader", false);
        }
    }
}
*/

const DISTORTION_SHADER = "DistortRipple";

class EffectPlayer : DoomPlayer
{


	override void Tick()
	{
		Super.Tick();
		
		if (!player || !player.mo || player.mo != self)	
			return;
		
		//Shader.SetEnabled(Player, DISTORTION_SHADER, true);
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "NewTime", level.time);
		//Shader.SetUniform3f(Player, DISTORTION_SHADER, "tintColor", (0.0, sin(level.time), 0.0));
		Shader.SetUniform3f(Player, DISTORTION_SHADER, "hsvShift", (sin(level.time), sin(level.time), cos(level.time)));
	}
	

	override void PostBeginPlay()
	{
		Console.Printf("Player init");
		super.PostBeginPlay();
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "timeMultiplier", 0.01);
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "scale", 1);
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "distortionMultiplier", 0.05);
		Shader.SetUniform1f(Player, DISTORTION_SHADER, "subtractiveDistortionMultiplier", 0.5);
		/*
        ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
        Actor mo;
        while ( mo = Actor(MonsterFinder.Next()) )
        {
            if ( mo.bIsMonster )
            {
                //mo.RenderStyle = "Fuzzy";
				Console.Printf("Got monster" .. mo);
            }
		}
		*/
	}
}

		/*
		if (health < 50)
		{
			Shader.SetEnabled(Player, "healthshader", true);
			Shader.SetUniform1f(Player, "healthshader", "saturation", clamp(health / 50.0, 0.0, 1.0));
			Shader.SetUniform3f(Player, "healthshader", "saturationColor", (1.5, 0.5, 0.5));
		}
		else if (health > 150)
		{
			Shader.SetEnabled(Player, "healthshader", true);
			Shader.SetUniform1f(Player, "healthshader", "saturation", clamp((200 - health) / 50.0, 0.0, 1.0));
			Shader.SetUniform3f(Player, "healthshader", "saturationColor", (0.5, 0.5, 1.5));
		}
		else
		{
			Shader.SetEnabled(Player, "healthshader", false);
		}
		*/
		
